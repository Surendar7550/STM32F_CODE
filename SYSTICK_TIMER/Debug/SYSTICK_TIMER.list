
SYSTICK_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  08000424  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  08000424  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000428  08000428  00001428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800042c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000430  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000430  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001455  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000566  00000000  00000000  00003489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000039f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014b  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffea  00000000  00000000  00003d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025de  00000000  00000000  00023d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b02  00000000  00000000  000262e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eade5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000560  00000000  00000000  000eae28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000eb388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800040c 	.word	0x0800040c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800040c 	.word	0x0800040c

08000204 <main>:
#define LED_PIN_13	(1U<<13)
#define LED_PIN_14 	(1U<<14)


int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
//	RCC->AHB1ENR |=GPIOAEN;
//
//	GPIOA->MODER |=(1U<<10);
//	GPIOA->MODER &=~(1U<<11);

	RCC->AHB1ENR |=GPIOBEN;
 8000208:	4b17      	ldr	r3, [pc, #92]	@ (8000268 <main+0x64>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a16      	ldr	r2, [pc, #88]	@ (8000268 <main+0x64>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |=(1U<<26);
 8000214:	4b15      	ldr	r3, [pc, #84]	@ (800026c <main+0x68>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a14      	ldr	r2, [pc, #80]	@ (800026c <main+0x68>)
 800021a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<27);
 8000220:	4b12      	ldr	r3, [pc, #72]	@ (800026c <main+0x68>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <main+0x68>)
 8000226:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<28);
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <main+0x68>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0e      	ldr	r2, [pc, #56]	@ (800026c <main+0x68>)
 8000232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000236:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &=~(1U<<29);
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <main+0x68>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0b      	ldr	r2, [pc, #44]	@ (800026c <main+0x68>)
 800023e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000242:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOB->ODR ^=LED_PIN_13;
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <main+0x68>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a08      	ldr	r2, [pc, #32]	@ (800026c <main+0x68>)
 800024a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800024e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR ^=LED_PIN_14;
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <main+0x68>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <main+0x68>)
 8000256:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800025a:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000260:	f000 f886 	bl	8000370 <systickDelayMs>
		GPIOB->ODR ^=LED_PIN_13;
 8000264:	bf00      	nop
 8000266:	e7ed      	b.n	8000244 <main+0x40>
 8000268:	40023800 	.word	0x40023800
 800026c:	40020400 	.word	0x40020400

08000270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <NMI_Handler+0x4>

08000278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <HardFault_Handler+0x4>

08000280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <MemManage_Handler+0x4>

08000288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <BusFault_Handler+0x4>

08000290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000294:	bf00      	nop
 8000296:	e7fd      	b.n	8000294 <UsageFault_Handler+0x4>

08000298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr

080002a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c6:	f000 f83f 	bl	8000348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <SystemInit+0x20>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002da:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <SystemInit+0x20>)
 80002dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800032c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002f8:	f7ff ffea 	bl	80002d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	@ (8000330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	@ (8000334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	@ (800033c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	@ (8000340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f84f 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000326:	f7ff ff6d 	bl	8000204 <main>
  bx  lr    
 800032a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800032c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000338:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 800033c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000340:	20000024 	.word	0x20000024

08000344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <HAL_IncTick+0x20>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	4b06      	ldr	r3, [pc, #24]	@ (800036c <HAL_IncTick+0x24>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4413      	add	r3, r2
 8000358:	4a04      	ldr	r2, [pc, #16]	@ (800036c <HAL_IncTick+0x24>)
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000
 800036c:	20000020 	.word	0x20000020

08000370 <systickDelayMs>:
#define CTRL_ENABLE				(1U<<0)
#define CTRL_CLKSRC				(1U<<2)
#define CTRL_COUTERFLAG			(1U<<16)

void systickDelayMs(int delay)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	//RELOAD WITH VALUE NUMBER OF CLOCK MILLISECOND
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000378:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <systickDelayMs+0x50>)
 800037a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800037e:	605a      	str	r2, [r3, #4]

	//CLEAR THE CURRENT VALUE REGISTER
	SysTick->VAL = 0;
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <systickDelayMs+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]

	//ENABLE SYSTICK AND SELECT INTERNAL CLK SOURCE
	SysTick->CTRL =CTRL_ENABLE | CTRL_CLKSRC;
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <systickDelayMs+0x50>)
 8000388:	2205      	movs	r2, #5
 800038a:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay; i++)
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e009      	b.n	80003a6 <systickDelayMs+0x36>
	{
		//WAIT AT COUNTER FLAG IS SET
		while((SysTick->CTRL & CTRL_COUTERFLAG)==0){}
 8000392:	bf00      	nop
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <systickDelayMs+0x50>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0f9      	beq.n	8000394 <systickDelayMs+0x24>
	for(int i=0; i<delay; i++)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dbf1      	blt.n	8000392 <systickDelayMs+0x22>
	}
	SysTick->CTRL = 0;
 80003ae:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <systickDelayMs+0x50>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
}
 80003b4:	bf00      	nop
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	e000e010 	.word	0xe000e010

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	4d0d      	ldr	r5, [pc, #52]	@ (80003fc <__libc_init_array+0x38>)
 80003c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000400 <__libc_init_array+0x3c>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	2600      	movs	r6, #0
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000404 <__libc_init_array+0x40>)
 80003d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000408 <__libc_init_array+0x44>)
 80003d8:	f000 f818 	bl	800040c <_init>
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	2600      	movs	r6, #0
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

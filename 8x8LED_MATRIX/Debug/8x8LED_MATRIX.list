
8x8LED_MATRIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001de4  08001de4  00002de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001df4  08001df4  00003018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001df4  08001df4  00002df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dfc  08001dfc  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dfc  08001dfc  00002dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e00  08001e00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001e04  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003018  2**0
                  CONTENTS
 10 .bss          00000078  20000018  20000018  00003018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00003018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005747  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000121c  00000000  00000000  0000878f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000600  00000000  00000000  000099b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000472  00000000  00000000  00009fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d574  00000000  00000000  0000a422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006c3e  00000000  00000000  00027996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3686  00000000  00000000  0002e5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e1c5a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001758  00000000  00000000  000e1ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000e33f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001dcc 	.word	0x08001dcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001dcc 	.word	0x08001dcc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MAX7219_Send>:
    0x0b00001111, // 7
    0x0b11110000, // 8
    0x0b00001111  // 9
};
void MAX7219_Send(uint8_t address, uint8_t data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {address, data};
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET); // CS LOW
 800050c:	2200      	movs	r2, #0
 800050e:	2110      	movs	r1, #16
 8000510:	4809      	ldr	r0, [pc, #36]	@ (8000538 <MAX7219_Send+0x44>)
 8000512:	f000 fd47 	bl	8000fa4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY); // Send data
 8000516:	f107 010c 	add.w	r1, r7, #12
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2202      	movs	r2, #2
 8000520:	4806      	ldr	r0, [pc, #24]	@ (800053c <MAX7219_Send+0x48>)
 8000522:	f001 fa06 	bl	8001932 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);   // CS HIGH
 8000526:	2201      	movs	r2, #1
 8000528:	2110      	movs	r1, #16
 800052a:	4803      	ldr	r0, [pc, #12]	@ (8000538 <MAX7219_Send+0x44>)
 800052c:	f000 fd3a 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020000 	.word	0x40020000
 800053c:	20000034 	.word	0x20000034

08000540 <MAX7219_Init>:
void MAX7219_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    MAX7219_Send(0x09, 0x00); // No decode mode
 8000544:	2100      	movs	r1, #0
 8000546:	2009      	movs	r0, #9
 8000548:	f7ff ffd4 	bl	80004f4 <MAX7219_Send>
    MAX7219_Send(0x0A, 0x03); // Brightness (0x00 to 0x0F)
 800054c:	2103      	movs	r1, #3
 800054e:	200a      	movs	r0, #10
 8000550:	f7ff ffd0 	bl	80004f4 <MAX7219_Send>
    MAX7219_Send(0x0B, 0x07); // Scan limit = 8 digits
 8000554:	2107      	movs	r1, #7
 8000556:	200b      	movs	r0, #11
 8000558:	f7ff ffcc 	bl	80004f4 <MAX7219_Send>
    MAX7219_Send(0x0C, 0x01); // Exit shutdown mode
 800055c:	2101      	movs	r1, #1
 800055e:	200c      	movs	r0, #12
 8000560:	f7ff ffc8 	bl	80004f4 <MAX7219_Send>
    MAX7219_Send(0x0F, 0x00); // Display test OFF
 8000564:	2100      	movs	r1, #0
 8000566:	200f      	movs	r0, #15
 8000568:	f7ff ffc4 	bl	80004f4 <MAX7219_Send>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000576:	f000 f9fd 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f835 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8c7 	bl	8000710 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000582:	f000 f88f 	bl	80006a4 <MX_SPI1_Init>
  MAX7219_Init();
 8000586:	f7ff ffdb 	bl	8000540 <MAX7219_Init>

  /* USER CODE BEGIN 2 */
  MAX7219_Send(1, segment_hex[1]);
 800058a:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <main+0x74>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	4619      	mov	r1, r3
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ffaf 	bl	80004f4 <MAX7219_Send>
  MAX7219_Send(2, segment_hex[2]);
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <main+0x74>)
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	4619      	mov	r1, r3
 800059c:	2002      	movs	r0, #2
 800059e:	f7ff ffa9 	bl	80004f4 <MAX7219_Send>
  MAX7219_Send(3, segment_hex[3]);
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <main+0x74>)
 80005a4:	78db      	ldrb	r3, [r3, #3]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2003      	movs	r0, #3
 80005aa:	f7ff ffa3 	bl	80004f4 <MAX7219_Send>
  MAX7219_Send(4, segment_hex[4]);
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <main+0x74>)
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff9d 	bl	80004f4 <MAX7219_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (uint8_t i = 0; i < 10; i++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	e00d      	b.n	80005dc <main+0x6c>
	              MAX7219_Send(1, segment_hex[i]);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4a08      	ldr	r2, [pc, #32]	@ (80005e4 <main+0x74>)
 80005c4:	5cd3      	ldrb	r3, [r2, r3]
 80005c6:	4619      	mov	r1, r3
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff ff93 	bl	80004f4 <MAX7219_Send>
	              HAL_Delay(500);
 80005ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d2:	f000 fa41 	bl	8000a58 <HAL_Delay>
	  for (uint8_t i = 0; i < 10; i++) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	3301      	adds	r3, #1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	d9ee      	bls.n	80005c0 <main+0x50>
 80005e2:	e7ea      	b.n	80005ba <main+0x4a>
 80005e4:	20000000 	.word	0x20000000

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fbbc 	bl	8001d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <SystemClock_Config+0xb4>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <SystemClock_Config+0xb8>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fcbd 	bl	8000fd8 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000664:	f000 f8a4 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ff20 	bl	80014c8 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800068e:	f000 f88f 	bl	80007b0 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006aa:	4a18      	ldr	r2, [pc, #96]	@ (800070c <MX_SPI1_Init+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006f0:	220a      	movs	r2, #10
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_SPI1_Init+0x64>)
 80006f6:	f001 f893 	bl	8001820 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f856 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000034 	.word	0x20000034
 800070c:	40013000 	.word	0x40013000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_GPIO_Init+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0x98>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_GPIO_Init+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <MX_GPIO_Init+0x9c>)
 8000780:	f000 fc10 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_GPIO_Init+0x9c>)
 800079c:	f000 fa66 	bl	8000c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <HAL_SPI_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12b      	bne.n	8000886 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800083c:	6453      	str	r3, [r2, #68]	@ 0x44
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_SPI_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000866:	23e0      	movs	r3, #224	@ 0xe0
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000876:	2305      	movs	r3, #5
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <HAL_SPI_MspInit+0x8c>)
 8000882:	f000 f9f3 	bl	8000c6c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40013000 	.word	0x40013000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f891 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	@ (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000924:	f7ff ffea 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	@ (8000960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	@ (800096c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800094e:	f001 fa19 	bl	8001d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fe0d 	bl	8000570 <main>
  bx  lr    
 8000956:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8000958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000964:	08001e04 	.word	0x08001e04
  ldr r2, =_sbss
 8000968:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800096c:	20000090 	.word	0x20000090

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <HAL_Init+0x40>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000984:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_Init+0x40>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800098e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	@ (80009b4 <HAL_Init+0x40>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800099a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f931 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	200f      	movs	r0, #15
 80009a4:	f000 f808 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff ff08 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023c00 	.word	0x40023c00

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f93b 	bl	8000c52 <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f911 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	@ (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	20000014 	.word	0x20000014
 8000a14:	20000010 	.word	0x20000010

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000014 	.word	0x20000014
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000008c 	.word	0x2000008c

08000a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff ffee 	bl	8000a40 <HAL_GetTick>
 8000a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a70:	d005      	beq.n	8000a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <HAL_Delay+0x44>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7e:	bf00      	nop
 8000a80:	f7ff ffde 	bl	8000a40 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f7      	bhi.n	8000a80 <HAL_Delay+0x28>
  {
  }
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000014 	.word	0x20000014

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff47 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff5c 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffb0 	bl	8000bc0 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
 8000c86:	e16b      	b.n	8000f60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f040 815a 	bne.w	8000f5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d005      	beq.n	8000cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d130      	bne.n	8000d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	f003 0201 	and.w	r2, r3, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d017      	beq.n	8000d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d123      	bne.n	8000db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	69b9      	ldr	r1, [r7, #24]
 8000dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0203 	and.w	r2, r3, #3
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80b4 	beq.w	8000f5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b60      	ldr	r3, [pc, #384]	@ (8000f78 <HAL_GPIO_Init+0x30c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8000f78 <HAL_GPIO_Init+0x30c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e02:	4b5d      	ldr	r3, [pc, #372]	@ (8000f78 <HAL_GPIO_Init+0x30c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8000f7c <HAL_GPIO_Init+0x310>)
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3302      	adds	r3, #2
 8000e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a52      	ldr	r2, [pc, #328]	@ (8000f80 <HAL_GPIO_Init+0x314>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d02b      	beq.n	8000e92 <HAL_GPIO_Init+0x226>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a51      	ldr	r2, [pc, #324]	@ (8000f84 <HAL_GPIO_Init+0x318>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d025      	beq.n	8000e8e <HAL_GPIO_Init+0x222>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a50      	ldr	r2, [pc, #320]	@ (8000f88 <HAL_GPIO_Init+0x31c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x21e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f8c <HAL_GPIO_Init+0x320>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x21a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4e      	ldr	r2, [pc, #312]	@ (8000f90 <HAL_GPIO_Init+0x324>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x216>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f94 <HAL_GPIO_Init+0x328>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x212>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	@ (8000f98 <HAL_GPIO_Init+0x32c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x20e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f9c <HAL_GPIO_Init+0x330>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x20a>
 8000e72:	2307      	movs	r3, #7
 8000e74:	e00e      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e76:	2308      	movs	r3, #8
 8000e78:	e00c      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e00a      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e008      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e82:	2304      	movs	r3, #4
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e86:	2303      	movs	r3, #3
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x228>
 8000e92:	2300      	movs	r3, #0
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	f002 0203 	and.w	r2, r2, #3
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea4:	4935      	ldr	r1, [pc, #212]	@ (8000f7c <HAL_GPIO_Init+0x310>)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed6:	4a32      	ldr	r2, [pc, #200]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000edc:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f06:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f54:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <HAL_GPIO_Init+0x334>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	f67f ae90 	bls.w	8000c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3724      	adds	r7, #36	@ 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021c00 	.word	0x40021c00
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e267      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d075      	beq.n	80010e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ff6:	4b88      	ldr	r3, [pc, #544]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d00c      	beq.n	800101c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001002:	4b85      	ldr	r3, [pc, #532]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800100a:	2b08      	cmp	r3, #8
 800100c:	d112      	bne.n	8001034 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100e:	4b82      	ldr	r3, [pc, #520]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800101a:	d10b      	bne.n	8001034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101c:	4b7e      	ldr	r3, [pc, #504]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d05b      	beq.n	80010e0 <HAL_RCC_OscConfig+0x108>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d157      	bne.n	80010e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e242      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x74>
 800103e:	4b76      	ldr	r3, [pc, #472]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a75      	ldr	r2, [pc, #468]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e01d      	b.n	8001088 <HAL_RCC_OscConfig+0xb0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001056:	4b70      	ldr	r3, [pc, #448]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6f      	ldr	r2, [pc, #444]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b6d      	ldr	r3, [pc, #436]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6c      	ldr	r2, [pc, #432]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e00b      	b.n	8001088 <HAL_RCC_OscConfig+0xb0>
 8001070:	4b69      	ldr	r3, [pc, #420]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a68      	ldr	r2, [pc, #416]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b66      	ldr	r3, [pc, #408]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a65      	ldr	r2, [pc, #404]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcd6 	bl	8000a40 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fcd2 	bl	8000a40 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	@ 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e207      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0xc0>
 80010b6:	e014      	b.n	80010e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fcc2 	bl	8000a40 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fcbe 	bl	8000a40 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	@ 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1f3      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	4b51      	ldr	r3, [pc, #324]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0xe8>
 80010de:	e000      	b.n	80010e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d063      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fa:	4b47      	ldr	r3, [pc, #284]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001102:	2b08      	cmp	r3, #8
 8001104:	d11c      	bne.n	8001140 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001106:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	4b41      	ldr	r3, [pc, #260]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_RCC_OscConfig+0x152>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e1c7      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	e03a      	b.n	80011b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	4b34      	ldr	r3, [pc, #208]	@ (800121c <HAL_RCC_OscConfig+0x244>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fc77 	bl	8000a40 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fc73 	bl	8000a40 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e1a8      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4925      	ldr	r1, [pc, #148]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_RCC_OscConfig+0x244>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fc56 	bl	8000a40 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fc52 	bl	8000a40 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e187      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d036      	beq.n	8001230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d016      	beq.n	80011f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_RCC_OscConfig+0x248>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d0:	f7ff fc36 	bl	8000a40 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc32 	bl	8000a40 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e167      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_RCC_OscConfig+0x240>)
 80011ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x200>
 80011f6:	e01b      	b.n	8001230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_RCC_OscConfig+0x248>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fc1f 	bl	8000a40 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	e00e      	b.n	8001224 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001206:	f7ff fc1b 	bl	8000a40 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d907      	bls.n	8001224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e150      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
 8001218:	40023800 	.word	0x40023800
 800121c:	42470000 	.word	0x42470000
 8001220:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	4b88      	ldr	r3, [pc, #544]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1ea      	bne.n	8001206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8097 	beq.w	800136c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001242:	4b81      	ldr	r3, [pc, #516]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b7d      	ldr	r3, [pc, #500]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a7c      	ldr	r2, [pc, #496]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b7a      	ldr	r3, [pc, #488]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126e:	4b77      	ldr	r3, [pc, #476]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d118      	bne.n	80012ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127a:	4b74      	ldr	r3, [pc, #464]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a73      	ldr	r2, [pc, #460]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fbdb 	bl	8000a40 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128e:	f7ff fbd7 	bl	8000a40 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e10c      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	4b6a      	ldr	r3, [pc, #424]	@ (800144c <HAL_RCC_OscConfig+0x474>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2ea>
 80012b4:	4b64      	ldr	r3, [pc, #400]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b8:	4a63      	ldr	r2, [pc, #396]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6713      	str	r3, [r2, #112]	@ 0x70
 80012c0:	e01c      	b.n	80012fc <HAL_RCC_OscConfig+0x324>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x30c>
 80012ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80012d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	4a5b      	ldr	r2, [pc, #364]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0x324>
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e8:	4a57      	ldr	r2, [pc, #348]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f0:	4b55      	ldr	r3, [pc, #340]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	4a54      	ldr	r2, [pc, #336]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f023 0304 	bic.w	r3, r3, #4
 80012fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d015      	beq.n	8001330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fb9c 	bl	8000a40 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff fb98 	bl	8000a40 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e0cb      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001322:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0ee      	beq.n	800130c <HAL_RCC_OscConfig+0x334>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fb86 	bl	8000a40 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff fb82 	bl	8000a40 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0b5      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134e:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1ee      	bne.n	8001338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001360:	4b39      	ldr	r3, [pc, #228]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a38      	ldr	r2, [pc, #224]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80a1 	beq.w	80014b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001376:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b08      	cmp	r3, #8
 8001380:	d05c      	beq.n	800143c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d141      	bne.n	800140e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <HAL_RCC_OscConfig+0x478>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb56 	bl	8000a40 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff fb52 	bl	8000a40 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e087      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013cc:	085b      	lsrs	r3, r3, #1
 80013ce:	3b01      	subs	r3, #1
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	491b      	ldr	r1, [pc, #108]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_RCC_OscConfig+0x478>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb2b 	bl	8000a40 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff fb27 	bl	8000a40 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e05c      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x416>
 800140c:	e054      	b.n	80014b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <HAL_RCC_OscConfig+0x478>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb14 	bl	8000a40 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fb10 	bl	8000a40 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e045      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_RCC_OscConfig+0x470>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x444>
 800143a:	e03d      	b.n	80014b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e038      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000
 8001450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_RCC_OscConfig+0x4ec>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d028      	beq.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d121      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d11a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800148a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800148c:	4293      	cmp	r3, r2
 800148e:	d111      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	3b01      	subs	r3, #1
 800149e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0cc      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d90c      	bls.n	8001504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b65      	ldr	r3, [pc, #404]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b63      	ldr	r3, [pc, #396]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b8      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b59      	ldr	r3, [pc, #356]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001526:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b53      	ldr	r3, [pc, #332]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a52      	ldr	r2, [pc, #328]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800153e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b50      	ldr	r3, [pc, #320]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	494d      	ldr	r1, [pc, #308]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d044      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b47      	ldr	r3, [pc, #284]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d003      	beq.n	8001586 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b3f      	ldr	r3, [pc, #252]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e067      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 0203 	bic.w	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4934      	ldr	r1, [pc, #208]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fa42 	bl	8000a40 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff fa3e 	bl	8000a40 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e04f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 020c 	and.w	r2, r3, #12
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1eb      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e8:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d20c      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e032      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4916      	ldr	r1, [pc, #88]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	490e      	ldr	r1, [pc, #56]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800164e:	f000 f821 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	490a      	ldr	r1, [pc, #40]	@ (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f9a2 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00
 8001684:	40023800 	.word	0x40023800
 8001688:	08001de4 	.word	0x08001de4
 800168c:	2000000c 	.word	0x2000000c
 8001690:	20000010 	.word	0x20000010

08001694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001698:	b090      	sub	sp, #64	@ 0x40
 800169a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ac:	4b59      	ldr	r3, [pc, #356]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d00d      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x40>
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	f200 80a1 	bhi.w	8001800 <HAL_RCC_GetSysClockFreq+0x16c>
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x34>
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x3a>
 80016c6:	e09b      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x184>)
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016cc:	e09b      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ce:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_GetSysClockFreq+0x188>)
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016d2:	e098      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016de:	4b4d      	ldr	r3, [pc, #308]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d028      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	2200      	movs	r2, #0
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016fc:	2100      	movs	r1, #0
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_GetSysClockFreq+0x188>)
 8001700:	fb03 f201 	mul.w	r2, r3, r1
 8001704:	2300      	movs	r3, #0
 8001706:	fb00 f303 	mul.w	r3, r0, r3
 800170a:	4413      	add	r3, r2
 800170c:	4a43      	ldr	r2, [pc, #268]	@ (800181c <HAL_RCC_GetSysClockFreq+0x188>)
 800170e:	fba0 1202 	umull	r1, r2, r0, r2
 8001712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001714:	460a      	mov	r2, r1
 8001716:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	4413      	add	r3, r2
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800171e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001720:	2200      	movs	r2, #0
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	61fa      	str	r2, [r7, #28]
 8001726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800172a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800172e:	f7fe fd4b 	bl	80001c8 <__aeabi_uldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4613      	mov	r3, r2
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800173a:	e053      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173c:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	2200      	movs	r2, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	617a      	str	r2, [r7, #20]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800174e:	f04f 0b00 	mov.w	fp, #0
 8001752:	4652      	mov	r2, sl
 8001754:	465b      	mov	r3, fp
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	0159      	lsls	r1, r3, #5
 8001760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001764:	0150      	lsls	r0, r2, #5
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	ebb2 080a 	subs.w	r8, r2, sl
 800176e:	eb63 090b 	sbc.w	r9, r3, fp
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800177e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001782:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001786:	ebb2 0408 	subs.w	r4, r2, r8
 800178a:	eb63 0509 	sbc.w	r5, r3, r9
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	00eb      	lsls	r3, r5, #3
 8001798:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800179c:	00e2      	lsls	r2, r4, #3
 800179e:	4614      	mov	r4, r2
 80017a0:	461d      	mov	r5, r3
 80017a2:	eb14 030a 	adds.w	r3, r4, sl
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	eb45 030b 	adc.w	r3, r5, fp
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ba:	4629      	mov	r1, r5
 80017bc:	028b      	lsls	r3, r1, #10
 80017be:	4621      	mov	r1, r4
 80017c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c4:	4621      	mov	r1, r4
 80017c6:	028a      	lsls	r2, r1, #10
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ce:	2200      	movs	r2, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	60fa      	str	r2, [r7, #12]
 80017d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d8:	f7fe fcf6 	bl	80001c8 <__aeabi_uldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4613      	mov	r3, r2
 80017e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	3301      	adds	r3, #1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017fe:	e002      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x184>)
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001808:	4618      	mov	r0, r3
 800180a:	3740      	adds	r7, #64	@ 0x40
 800180c:	46bd      	mov	sp, r7
 800180e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	00f42400 	.word	0x00f42400
 800181c:	017d7840 	.word	0x017d7840

08001820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07b      	b.n	800192a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001842:	d009      	beq.n	8001858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
 800184a:	e005      	b.n	8001858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ffca 	bl	800080c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800188e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	ea42 0103 	orr.w	r1, r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	f003 0104 	and.w	r1, r3, #4
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	f003 0210 	and.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b088      	sub	sp, #32
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001942:	f7ff f87d 	bl	8000a40 <HAL_GetTick>
 8001946:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d001      	beq.n	800195c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001958:	2302      	movs	r3, #2
 800195a:	e12a      	b.n	8001bb2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_SPI_Transmit+0x36>
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e122      	b.n	8001bb2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_SPI_Transmit+0x48>
 8001976:	2302      	movs	r3, #2
 8001978:	e11b      	b.n	8001bb2 <HAL_SPI_Transmit+0x280>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	88fa      	ldrh	r2, [r7, #6]
 800199a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	88fa      	ldrh	r2, [r7, #6]
 80019a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019c8:	d10f      	bne.n	80019ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f4:	2b40      	cmp	r3, #64	@ 0x40
 80019f6:	d007      	beq.n	8001a08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a10:	d152      	bne.n	8001ab8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_SPI_Transmit+0xee>
 8001a1a:	8b7b      	ldrh	r3, [r7, #26]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d145      	bne.n	8001aac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	1c9a      	adds	r2, r3, #2
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a44:	e032      	b.n	8001aac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d112      	bne.n	8001a7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	1c9a      	adds	r2, r3, #2
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a78:	e018      	b.n	8001aac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a7a:	f7fe ffe1 	bl	8000a40 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d803      	bhi.n	8001a92 <HAL_SPI_Transmit+0x160>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d102      	bne.n	8001a98 <HAL_SPI_Transmit+0x166>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e082      	b.n	8001bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1c7      	bne.n	8001a46 <HAL_SPI_Transmit+0x114>
 8001ab6:	e053      	b.n	8001b60 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_SPI_Transmit+0x194>
 8001ac0:	8b7b      	ldrh	r3, [r7, #26]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d147      	bne.n	8001b56 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	330c      	adds	r3, #12
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001aec:	e033      	b.n	8001b56 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d113      	bne.n	8001b24 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	330c      	adds	r3, #12
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b22:	e018      	b.n	8001b56 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b24:	f7fe ff8c 	bl	8000a40 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d803      	bhi.n	8001b3c <HAL_SPI_Transmit+0x20a>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d102      	bne.n	8001b42 <HAL_SPI_Transmit+0x210>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e02d      	b.n	8001bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1c6      	bne.n	8001aee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f8b1 	bl	8001ccc <SPI_EndRxTxTransaction>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001bcc:	f7fe ff38 	bl	8000a40 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001bdc:	f7fe ff30 	bl	8000a40 <HAL_GetTick>
 8001be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001be2:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	015b      	lsls	r3, r3, #5
 8001be8:	0d1b      	lsrs	r3, r3, #20
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bf2:	e055      	b.n	8001ca0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d051      	beq.n	8001ca0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bfc:	f7fe ff20 	bl	8000a40 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d902      	bls.n	8001c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d13d      	bne.n	8001c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c2a:	d111      	bne.n	8001c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c34:	d004      	beq.n	8001c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c3e:	d107      	bne.n	8001c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c58:	d10f      	bne.n	8001c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e018      	b.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e002      	b.n	8001ca0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d19a      	bne.n	8001bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000000c 	.word	0x2000000c

08001ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff ff6a 	bl	8001bbc <SPI_WaitFlagStateUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e032      	b.n	8001d64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <SPI_EndRxTxTransaction+0xa0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <SPI_EndRxTxTransaction+0xa4>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0d5b      	lsrs	r3, r3, #21
 8001d0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d1c:	d112      	bne.n	8001d44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	@ 0x80
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff ff47 	bl	8001bbc <SPI_WaitFlagStateUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e00f      	b.n	8001d64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5a:	2b80      	cmp	r3, #128	@ 0x80
 8001d5c:	d0f2      	beq.n	8001d44 <SPI_EndRxTxTransaction+0x78>
 8001d5e:	e000      	b.n	8001d62 <SPI_EndRxTxTransaction+0x96>
        break;
 8001d60:	bf00      	nop
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	165e9f81 	.word	0x165e9f81

08001d74 <memset>:
 8001d74:	4402      	add	r2, r0
 8001d76:	4603      	mov	r3, r0
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d100      	bne.n	8001d7e <memset+0xa>
 8001d7c:	4770      	bx	lr
 8001d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d82:	e7f9      	b.n	8001d78 <memset+0x4>

08001d84 <__libc_init_array>:
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	4d0d      	ldr	r5, [pc, #52]	@ (8001dbc <__libc_init_array+0x38>)
 8001d88:	4c0d      	ldr	r4, [pc, #52]	@ (8001dc0 <__libc_init_array+0x3c>)
 8001d8a:	1b64      	subs	r4, r4, r5
 8001d8c:	10a4      	asrs	r4, r4, #2
 8001d8e:	2600      	movs	r6, #0
 8001d90:	42a6      	cmp	r6, r4
 8001d92:	d109      	bne.n	8001da8 <__libc_init_array+0x24>
 8001d94:	4d0b      	ldr	r5, [pc, #44]	@ (8001dc4 <__libc_init_array+0x40>)
 8001d96:	4c0c      	ldr	r4, [pc, #48]	@ (8001dc8 <__libc_init_array+0x44>)
 8001d98:	f000 f818 	bl	8001dcc <_init>
 8001d9c:	1b64      	subs	r4, r4, r5
 8001d9e:	10a4      	asrs	r4, r4, #2
 8001da0:	2600      	movs	r6, #0
 8001da2:	42a6      	cmp	r6, r4
 8001da4:	d105      	bne.n	8001db2 <__libc_init_array+0x2e>
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
 8001da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dac:	4798      	blx	r3
 8001dae:	3601      	adds	r6, #1
 8001db0:	e7ee      	b.n	8001d90 <__libc_init_array+0xc>
 8001db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001db6:	4798      	blx	r3
 8001db8:	3601      	adds	r6, #1
 8001dba:	e7f2      	b.n	8001da2 <__libc_init_array+0x1e>
 8001dbc:	08001dfc 	.word	0x08001dfc
 8001dc0:	08001dfc 	.word	0x08001dfc
 8001dc4:	08001dfc 	.word	0x08001dfc
 8001dc8:	08001e00 	.word	0x08001e00

08001dcc <_init>:
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	bf00      	nop
 8001dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd2:	bc08      	pop	{r3}
 8001dd4:	469e      	mov	lr, r3
 8001dd6:	4770      	bx	lr

08001dd8 <_fini>:
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dda:	bf00      	nop
 8001ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dde:	bc08      	pop	{r3}
 8001de0:	469e      	mov	lr, r3
 8001de2:	4770      	bx	lr

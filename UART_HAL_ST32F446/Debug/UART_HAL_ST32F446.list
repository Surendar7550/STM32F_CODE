
UART_HAL_ST32F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002298  08002298  00003298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b0  080022b0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080022b0  080022b0  000032b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022b8  080022b8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022b8  080022b8  000032b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022bc  080022bc  000032bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022c0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080022cc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080022cc  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c77  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001492  00000000  00000000  0000bcb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000d148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000517  00000000  00000000  0000d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a66  00000000  00000000  0000dd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ad4  00000000  00000000  0002e76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7aed  00000000  00000000  00037241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fed2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a4c  00000000  00000000  000fed74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001007c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002280 	.word	0x08002280

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002280 	.word	0x08002280

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 f9d4 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f816 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f89e 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f872 	bl	8000628 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
      //HAL_UART_Transmit(&huart2, tx_buffer,20,10);
     // HAL_Delay(10);
	  //HAL_UART_Receive(&huart2, rx_data, rx_data[20],HAL_MAX_DELAY);
	  HAL_UART_Receive(&huart2, my_data, sizeof(my_data),HAL_MAX_DELAY);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	220a      	movs	r2, #10
 800054a:	4905      	ldr	r1, [pc, #20]	@ (8000560 <main+0x30>)
 800054c:	4805      	ldr	r0, [pc, #20]	@ (8000564 <main+0x34>)
 800054e:	f001 faa3 	bl	8001a98 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000556:	f000 fa35 	bl	80009c4 <HAL_Delay>
	  HAL_UART_Receive(&huart2, my_data, sizeof(my_data),HAL_MAX_DELAY);
 800055a:	bf00      	nop
 800055c:	e7f2      	b.n	8000544 <main+0x14>
 800055e:	bf00      	nop
 8000560:	20000070 	.word	0x20000070
 8000564:	20000028 	.word	0x20000028

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fe56 	bl	8002228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <SystemClock_Config+0xb8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <SystemClock_Config+0xb8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000624 <SystemClock_Config+0xbc>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <SystemClock_Config+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 ff6d 	bl	80014bc <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e8:	f000 f898 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fc94 	bl	8000f34 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000612:	f000 f883 	bl	800071c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	@ 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 f9ca 	bl	80019f8 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f857 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_GPIO_Init+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <MX_GPIO_Init+0x98>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_GPIO_Init+0x98>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	480b      	ldr	r0, [pc, #44]	@ (8000718 <MX_GPIO_Init+0x9c>)
 80006ec:	f000 fc08 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006f0:	2320      	movs	r3, #32
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0x9c>)
 8000708:	f000 fa66 	bl	8000bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073c:	6453      	str	r3, [r2, #68]	@ 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	@ 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a19      	ldr	r2, [pc, #100]	@ (80007fc <HAL_UART_MspInit+0x84>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d12b      	bne.n	80007f2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <HAL_UART_MspInit+0x88>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <HAL_UART_MspInit+0x88>)
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <HAL_UART_MspInit+0x88>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_UART_MspInit+0x88>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_UART_MspInit+0x88>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_UART_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e2:	2307      	movs	r3, #7
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <HAL_UART_MspInit+0x8c>)
 80007ee:	f000 f9f3 	bl	8000bd8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	@ 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40004400 	.word	0x40004400
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f891 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000890:	f7ff ffea 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	@ (80008cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	@ (80008d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f001 fcbd 	bl	8002238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008be:	f7ff fe37 	bl	8000530 <main>
  bx  lr    
 80008c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d0:	080022c0 	.word	0x080022c0
  ldr r2, =_sbss
 80008d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d8:	20000080 	.word	0x20000080

080008dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <HAL_Init+0x40>)
 80008ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <HAL_Init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <HAL_Init+0x40>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <HAL_Init+0x40>)
 8000902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f931 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	200f      	movs	r0, #15
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f7ff ff08 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023c00 	.word	0x40023c00

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f93b 	bl	8000bbe <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f911 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_IncTick+0x20>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_IncTick+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <HAL_IncTick+0x24>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008
 80009a8:	2000007c 	.word	0x2000007c

080009ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2000007c 	.word	0x2000007c

080009c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009cc:	f7ff ffee 	bl	80009ac <HAL_GetTick>
 80009d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009dc:	d005      	beq.n	80009ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_Delay+0x44>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ea:	bf00      	nop
 80009ec:	f7ff ffde 	bl	80009ac <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d8f7      	bhi.n	80009ec <HAL_Delay+0x28>
  {
  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	@ (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	@ (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff47 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff5c 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff8e 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffb0 	bl	8000b2c <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	e165      	b.n	8000ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	f040 8154 	bne.w	8000eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d005      	beq.n	8000c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d130      	bne.n	8000c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c60:	2201      	movs	r2, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	f003 0201 	and.w	r2, r3, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d017      	beq.n	8000cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d123      	bne.n	8000d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	08da      	lsrs	r2, r3, #3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3208      	adds	r2, #8
 8000d16:	69b9      	ldr	r1, [r7, #24]
 8000d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0203 	and.w	r2, r3, #3
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80ae 	beq.w	8000eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed8 <HAL_GPIO_Init+0x300>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	4a5c      	ldr	r2, [pc, #368]	@ (8000ed8 <HAL_GPIO_Init+0x300>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ed8 <HAL_GPIO_Init+0x300>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7a:	4a58      	ldr	r2, [pc, #352]	@ (8000edc <HAL_GPIO_Init+0x304>)
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3302      	adds	r3, #2
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee0 <HAL_GPIO_Init+0x308>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d025      	beq.n	8000df2 <HAL_GPIO_Init+0x21a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	@ (8000ee4 <HAL_GPIO_Init+0x30c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01f      	beq.n	8000dee <HAL_GPIO_Init+0x216>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee8 <HAL_GPIO_Init+0x310>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0x212>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	@ (8000eec <HAL_GPIO_Init+0x314>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x20e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef0 <HAL_GPIO_Init+0x318>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x20a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8000ef4 <HAL_GPIO_Init+0x31c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x206>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a49      	ldr	r2, [pc, #292]	@ (8000ef8 <HAL_GPIO_Init+0x320>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x202>
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	e00c      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000dda:	2307      	movs	r3, #7
 8000ddc:	e00a      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000dde:	2305      	movs	r3, #5
 8000de0:	e008      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000de2:	2304      	movs	r3, #4
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e004      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <HAL_GPIO_Init+0x21c>
 8000df2:	2300      	movs	r3, #0
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	f002 0203 	and.w	r2, r2, #3
 8000dfa:	0092      	lsls	r2, r2, #2
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e04:	4935      	ldr	r1, [pc, #212]	@ (8000edc <HAL_GPIO_Init+0x304>)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e12:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e36:	4a31      	ldr	r2, [pc, #196]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e60:	4a26      	ldr	r2, [pc, #152]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e66:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb4:	4a11      	ldr	r2, [pc, #68]	@ (8000efc <HAL_GPIO_Init+0x324>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	f67f ae96 	bls.w	8000bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020c00 	.word	0x40020c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40021400 	.word	0x40021400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40013c00 	.word	0x40013c00

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	619a      	str	r2, [r3, #24]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0cc      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f48:	4b68      	ldr	r3, [pc, #416]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d90c      	bls.n	8000f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f56:	4b65      	ldr	r3, [pc, #404]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f5e:	4b63      	ldr	r3, [pc, #396]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d001      	beq.n	8000f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0b8      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d020      	beq.n	8000fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f88:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4a58      	ldr	r2, [pc, #352]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fa0:	4b53      	ldr	r3, [pc, #332]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a52      	ldr	r2, [pc, #328]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fac:	4b50      	ldr	r3, [pc, #320]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	494d      	ldr	r1, [pc, #308]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d044      	beq.n	8001054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	4b47      	ldr	r3, [pc, #284]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d119      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e07f      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d107      	bne.n	8001002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e06f      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001002:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e067      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f023 0203 	bic.w	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4934      	ldr	r1, [pc, #208]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001024:	f7ff fcc2 	bl	80009ac <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102a:	e00a      	b.n	8001042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102c:	f7ff fcbe 	bl	80009ac <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800103a:	4293      	cmp	r3, r2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e04f      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001042:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 020c 	and.w	r2, r3, #12
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	429a      	cmp	r2, r3
 8001052:	d1eb      	bne.n	800102c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001054:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d20c      	bcs.n	800107c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800106a:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d001      	beq.n	800107c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e032      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4916      	ldr	r1, [pc, #88]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ba:	f000 f855 	bl	8001168 <HAL_RCC_GetSysClockFreq>
 80010be:	4602      	mov	r2, r0
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	490a      	ldr	r1, [pc, #40]	@ (80010f4 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	5ccb      	ldrb	r3, [r1, r3]
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_RCC_ClockConfig+0x1c8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fc22 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00
 80010f0:	40023800 	.word	0x40023800
 80010f4:	08002298 	.word	0x08002298
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_RCC_GetHCLKFreq+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000

08001118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800111c:	f7ff fff0 	bl	8001100 <HAL_RCC_GetHCLKFreq>
 8001120:	4602      	mov	r2, r0
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	0a9b      	lsrs	r3, r3, #10
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	4903      	ldr	r1, [pc, #12]	@ (800113c <HAL_RCC_GetPCLK1Freq+0x24>)
 800112e:	5ccb      	ldrb	r3, [r1, r3]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40023800 	.word	0x40023800
 800113c:	080022a8 	.word	0x080022a8

08001140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001144:	f7ff ffdc 	bl	8001100 <HAL_RCC_GetHCLKFreq>
 8001148:	4602      	mov	r2, r0
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	0b5b      	lsrs	r3, r3, #13
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	4903      	ldr	r1, [pc, #12]	@ (8001164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001156:	5ccb      	ldrb	r3, [r1, r3]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	080022a8 	.word	0x080022a8

08001168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800116c:	b0a6      	sub	sp, #152	@ 0x98
 800116e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800118e:	4bc8      	ldr	r3, [pc, #800]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b0c      	cmp	r3, #12
 8001198:	f200 817e 	bhi.w	8001498 <HAL_RCC_GetSysClockFreq+0x330>
 800119c:	a201      	add	r2, pc, #4	@ (adr r2, 80011a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080011d9 	.word	0x080011d9
 80011a8:	08001499 	.word	0x08001499
 80011ac:	08001499 	.word	0x08001499
 80011b0:	08001499 	.word	0x08001499
 80011b4:	080011e1 	.word	0x080011e1
 80011b8:	08001499 	.word	0x08001499
 80011bc:	08001499 	.word	0x08001499
 80011c0:	08001499 	.word	0x08001499
 80011c4:	080011e9 	.word	0x080011e9
 80011c8:	08001499 	.word	0x08001499
 80011cc:	08001499 	.word	0x08001499
 80011d0:	08001499 	.word	0x08001499
 80011d4:	08001353 	.word	0x08001353
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011d8:	4bb6      	ldr	r3, [pc, #728]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80011da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80011de:	e15f      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011e0:	4bb5      	ldr	r3, [pc, #724]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x350>)
 80011e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80011e6:	e15b      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011e8:	4bb1      	ldr	r3, [pc, #708]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011f4:	4bae      	ldr	r3, [pc, #696]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d031      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001200:	4bab      	ldr	r3, [pc, #684]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	2200      	movs	r2, #0
 8001208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800120a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800120c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800120e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001212:	663b      	str	r3, [r7, #96]	@ 0x60
 8001214:	2300      	movs	r3, #0
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
 8001218:	4ba7      	ldr	r3, [pc, #668]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800121a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800121e:	462a      	mov	r2, r5
 8001220:	fb03 f202 	mul.w	r2, r3, r2
 8001224:	2300      	movs	r3, #0
 8001226:	4621      	mov	r1, r4
 8001228:	fb01 f303 	mul.w	r3, r1, r3
 800122c:	4413      	add	r3, r2
 800122e:	4aa2      	ldr	r2, [pc, #648]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001230:	4621      	mov	r1, r4
 8001232:	fba1 1202 	umull	r1, r2, r1, r2
 8001236:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001238:	460a      	mov	r2, r1
 800123a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800123c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800123e:	4413      	add	r3, r2
 8001240:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001246:	2200      	movs	r2, #0
 8001248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800124a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800124c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001250:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001254:	f7fe ffd6 	bl	8000204 <__aeabi_uldivmod>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4613      	mov	r3, r2
 800125e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001262:	e064      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001264:	4b92      	ldr	r3, [pc, #584]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	2200      	movs	r2, #0
 800126c:	653b      	str	r3, [r7, #80]	@ 0x50
 800126e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001278:	2300      	movs	r3, #0
 800127a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800127c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001280:	4622      	mov	r2, r4
 8001282:	462b      	mov	r3, r5
 8001284:	f04f 0000 	mov.w	r0, #0
 8001288:	f04f 0100 	mov.w	r1, #0
 800128c:	0159      	lsls	r1, r3, #5
 800128e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001292:	0150      	lsls	r0, r2, #5
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4621      	mov	r1, r4
 800129a:	1a51      	subs	r1, r2, r1
 800129c:	6139      	str	r1, [r7, #16]
 800129e:	4629      	mov	r1, r5
 80012a0:	eb63 0301 	sbc.w	r3, r3, r1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012b2:	4659      	mov	r1, fp
 80012b4:	018b      	lsls	r3, r1, #6
 80012b6:	4651      	mov	r1, sl
 80012b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012bc:	4651      	mov	r1, sl
 80012be:	018a      	lsls	r2, r1, #6
 80012c0:	4651      	mov	r1, sl
 80012c2:	ebb2 0801 	subs.w	r8, r2, r1
 80012c6:	4659      	mov	r1, fp
 80012c8:	eb63 0901 	sbc.w	r9, r3, r1
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e0:	4690      	mov	r8, r2
 80012e2:	4699      	mov	r9, r3
 80012e4:	4623      	mov	r3, r4
 80012e6:	eb18 0303 	adds.w	r3, r8, r3
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	462b      	mov	r3, r5
 80012ee:	eb49 0303 	adc.w	r3, r9, r3
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001300:	4629      	mov	r1, r5
 8001302:	028b      	lsls	r3, r1, #10
 8001304:	4621      	mov	r1, r4
 8001306:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800130a:	4621      	mov	r1, r4
 800130c:	028a      	lsls	r2, r1, #10
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001316:	2200      	movs	r2, #0
 8001318:	643b      	str	r3, [r7, #64]	@ 0x40
 800131a:	647a      	str	r2, [r7, #68]	@ 0x44
 800131c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001320:	f7fe ff70 	bl	8000204 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4613      	mov	r3, r2
 800132a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800132e:	4b60      	ldr	r3, [pc, #384]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	3301      	adds	r3, #1
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001340:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001350:	e0a6      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001352:	4b57      	ldr	r3, [pc, #348]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800135a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800135e:	4b54      	ldr	r3, [pc, #336]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02a      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136a:	4b51      	ldr	r3, [pc, #324]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	099b      	lsrs	r3, r3, #6
 8001370:	2200      	movs	r2, #0
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001374:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001378:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800137c:	2100      	movs	r1, #0
 800137e:	4b4e      	ldr	r3, [pc, #312]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001380:	fb03 f201 	mul.w	r2, r3, r1
 8001384:	2300      	movs	r3, #0
 8001386:	fb00 f303 	mul.w	r3, r0, r3
 800138a:	4413      	add	r3, r2
 800138c:	4a4a      	ldr	r2, [pc, #296]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800138e:	fba0 1202 	umull	r1, r2, r0, r2
 8001392:	677a      	str	r2, [r7, #116]	@ 0x74
 8001394:	460a      	mov	r2, r1
 8001396:	673a      	str	r2, [r7, #112]	@ 0x70
 8001398:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800139a:	4413      	add	r3, r2
 800139c:	677b      	str	r3, [r7, #116]	@ 0x74
 800139e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013a2:	2200      	movs	r2, #0
 80013a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80013a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80013b0:	f7fe ff28 	bl	8000204 <__aeabi_uldivmod>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4613      	mov	r3, r2
 80013ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013be:	e05b      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013c0:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	2200      	movs	r2, #0
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013dc:	4642      	mov	r2, r8
 80013de:	464b      	mov	r3, r9
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	0159      	lsls	r1, r3, #5
 80013ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ee:	0150      	lsls	r0, r2, #5
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4641      	mov	r1, r8
 80013f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80013fa:	4649      	mov	r1, r9
 80013fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800140c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001414:	ebb2 040a 	subs.w	r4, r2, sl
 8001418:	eb63 050b 	sbc.w	r5, r3, fp
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	00eb      	lsls	r3, r5, #3
 8001426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800142a:	00e2      	lsls	r2, r4, #3
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	4643      	mov	r3, r8
 8001432:	18e3      	adds	r3, r4, r3
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	464b      	mov	r3, r9
 8001438:	eb45 0303 	adc.w	r3, r5, r3
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800144a:	4629      	mov	r1, r5
 800144c:	028b      	lsls	r3, r1, #10
 800144e:	4621      	mov	r1, r4
 8001450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001454:	4621      	mov	r1, r4
 8001456:	028a      	lsls	r2, r1, #10
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001460:	2200      	movs	r2, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	61fa      	str	r2, [r7, #28]
 8001466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800146a:	f7fe fecb 	bl	8000204 <__aeabi_uldivmod>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4613      	mov	r3, r2
 8001474:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	0f1b      	lsrs	r3, r3, #28
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800148a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001496:	e003      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800149a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800149e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3798      	adds	r7, #152	@ 0x98
 80014a8:	46bd      	mov	sp, r7
 80014aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	00f42400 	.word	0x00f42400
 80014b8:	017d7840 	.word	0x017d7840

080014bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e28d      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 8083 	beq.w	80015e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014dc:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d019      	beq.n	800151c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80014e8:	4b91      	ldr	r3, [pc, #580]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80014f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001500:	d00c      	beq.n	800151c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b8b      	ldr	r3, [pc, #556]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4b88      	ldr	r3, [pc, #544]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800151a:	d10b      	bne.n	8001534 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4b84      	ldr	r3, [pc, #528]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x124>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e25a      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x90>
 800153e:	4b7c      	ldr	r3, [pc, #496]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7b      	ldr	r2, [pc, #492]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xcc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0xb4>
 8001556:	4b76      	ldr	r3, [pc, #472]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a75      	ldr	r2, [pc, #468]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b73      	ldr	r3, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a72      	ldr	r2, [pc, #456]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xcc>
 8001570:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6e      	ldr	r2, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b6c      	ldr	r3, [pc, #432]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a6b      	ldr	r2, [pc, #428]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fa0c 	bl	80009ac <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fa08 	bl	80009ac <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e21f      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b61      	ldr	r3, [pc, #388]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xdc>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff f9f8 	bl	80009ac <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff f9f4 	bl	80009ac <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e20b      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x104>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d06f      	beq.n	80016ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015ee:	4b50      	ldr	r3, [pc, #320]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d017      	beq.n	800162a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80015fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8001602:	2b08      	cmp	r3, #8
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001606:	4b4a      	ldr	r3, [pc, #296]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001612:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d11c      	bne.n	8001658 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161e:	4b44      	ldr	r3, [pc, #272]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x186>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e1d3      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4937      	ldr	r1, [pc, #220]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	e03a      	b.n	80016ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001660:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <HAL_RCC_OscConfig+0x278>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff f9a1 	bl	80009ac <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166e:	f7ff f99d 	bl	80009ac <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1b4      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	4b28      	ldr	r3, [pc, #160]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4925      	ldr	r1, [pc, #148]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e015      	b.n	80016ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_OscConfig+0x278>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff f980 	bl	80009ac <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff f97c 	bl	80009ac <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e193      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d036      	beq.n	8001748 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d016      	beq.n	8001710 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff f960 	bl	80009ac <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff f95c 	bl	80009ac <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e173      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_OscConfig+0x274>)
 8001704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x234>
 800170e:	e01b      	b.n	8001748 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_RCC_OscConfig+0x27c>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff f949 	bl	80009ac <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	e00e      	b.n	800173c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff f945 	bl	80009ac <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d907      	bls.n	800173c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e15c      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
 8001730:	40023800 	.word	0x40023800
 8001734:	42470000 	.word	0x42470000
 8001738:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173c:	4b8a      	ldr	r3, [pc, #552]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800173e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ea      	bne.n	800171e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8097 	beq.w	8001884 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175a:	4b83      	ldr	r3, [pc, #524]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10f      	bne.n	8001786 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b7f      	ldr	r3, [pc, #508]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a7e      	ldr	r2, [pc, #504]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b7c      	ldr	r3, [pc, #496]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b79      	ldr	r3, [pc, #484]	@ (800196c <HAL_RCC_OscConfig+0x4b0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4b76      	ldr	r3, [pc, #472]	@ (800196c <HAL_RCC_OscConfig+0x4b0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	@ (800196c <HAL_RCC_OscConfig+0x4b0>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff f905 	bl	80009ac <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff f901 	bl	80009ac <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e118      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b6c      	ldr	r3, [pc, #432]	@ (800196c <HAL_RCC_OscConfig+0x4b0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x31e>
 80017cc:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x358>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x340>
 80017e2:	4b61      	ldr	r3, [pc, #388]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	4a60      	ldr	r2, [pc, #384]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0x358>
 80017fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001800:	4a59      	ldr	r2, [pc, #356]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	@ 0x70
 8001808:	4b57      	ldr	r3, [pc, #348]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180c:	4a56      	ldr	r2, [pc, #344]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800180e:	f023 0304 	bic.w	r3, r3, #4
 8001812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d015      	beq.n	8001848 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f8c6 	bl	80009ac <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff f8c2 	bl	80009ac <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0d7      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	4b4b      	ldr	r3, [pc, #300]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ee      	beq.n	8001824 <HAL_RCC_OscConfig+0x368>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff f8b0 	bl	80009ac <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff f8ac 	bl	80009ac <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0c1      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ee      	bne.n	8001850 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	4a3a      	ldr	r2, [pc, #232]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80ad 	beq.w	80019e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b08      	cmp	r3, #8
 8001898:	d060      	beq.n	800195c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d145      	bne.n	800192e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <HAL_RCC_OscConfig+0x4b4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f880 	bl	80009ac <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f87c 	bl	80009ac <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e093      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	019b      	lsls	r3, r3, #6
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	071b      	lsls	r3, r3, #28
 80018fa:	491b      	ldr	r1, [pc, #108]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x4b4>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff f851 	bl	80009ac <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f84d 	bl	80009ac <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e064      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x452>
 800192c:	e05c      	b.n	80019e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_RCC_OscConfig+0x4b4>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f83a 	bl	80009ac <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f836 	bl	80009ac <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04d      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_RCC_OscConfig+0x4ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x480>
 800195a:	e045      	b.n	80019e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e040      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000
 8001970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001974:	4b1f      	ldr	r3, [pc, #124]	@ (80019f4 <HAL_RCC_OscConfig+0x538>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d030      	beq.n	80019e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d129      	bne.n	80019e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d122      	bne.n	80019e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d119      	bne.n	80019e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10f      	bne.n	80019e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e042      	b.n	8001a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe feaa 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	@ 0x24
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f97f 	bl	8001d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	f040 8081 	bne.w	8001bbc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_UART_Receive+0x2e>
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e079      	b.n	8001bbe <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2222      	movs	r2, #34	@ 0x22
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ade:	f7fe ff65 	bl	80009ac <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af8:	d108      	bne.n	8001b0c <HAL_UART_Receive+0x74>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e003      	b.n	8001b14 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b14:	e047      	b.n	8001ba6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2120      	movs	r1, #32
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f850 	bl	8001bc6 <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e042      	b.n	8001bbe <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	3302      	adds	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	e01f      	b.n	8001b98 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b60:	d007      	beq.n	8001b72 <HAL_UART_Receive+0xda>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_UART_Receive+0xe8>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e008      	b.n	8001b92 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1b2      	bne.n	8001b16 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd6:	e03b      	b.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bde:	d037      	beq.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be0:	f7fe fee4 	bl	80009ac <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	6a3a      	ldr	r2, [r7, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d302      	bcc.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e03a      	b.n	8001c70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b80      	cmp	r3, #128	@ 0x80
 8001c0c:	d020      	beq.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b40      	cmp	r3, #64	@ 0x40
 8001c12:	d01d      	beq.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d116      	bne.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f81d 	bl	8001c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2208      	movs	r2, #8
 8001c42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e00f      	b.n	8001c70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d0b4      	beq.n	8001bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b095      	sub	sp, #84	@ 0x54
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	330c      	adds	r3, #12
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8a:	e853 3f00 	ldrex	r3, [r3]
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ca0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ca8:	e841 2300 	strex	r3, r2, [r1]
 8001cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e5      	bne.n	8001c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	e853 3f00 	ldrex	r3, [r3]
 8001cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3314      	adds	r3, #20
 8001cd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cdc:	e841 2300 	strex	r3, r2, [r1]
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e5      	bne.n	8001cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d119      	bne.n	8001d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	e853 3f00 	ldrex	r3, [r3]
 8001cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f023 0310 	bic.w	r3, r3, #16
 8001d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d10:	61ba      	str	r2, [r7, #24]
 8001d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	e841 2300 	strex	r3, r2, [r1]
 8001d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e5      	bne.n	8001cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d32:	bf00      	nop
 8001d34:	3754      	adds	r7, #84	@ 0x54
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b0c0      	sub	sp, #256	@ 0x100
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	ea40 0301 	orr.w	r3, r0, r1
 8001d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d98:	f021 010c 	bic.w	r1, r1, #12
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001da6:	430b      	orrs	r3, r1
 8001da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dba:	6999      	ldr	r1, [r3, #24]
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	ea40 0301 	orr.w	r3, r0, r1
 8001dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b8f      	ldr	r3, [pc, #572]	@ (800200c <UART_SetConfig+0x2cc>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d005      	beq.n	8001de0 <UART_SetConfig+0xa0>
 8001dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b8d      	ldr	r3, [pc, #564]	@ (8002010 <UART_SetConfig+0x2d0>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d104      	bne.n	8001dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001de0:	f7ff f9ae 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8001de4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001de8:	e003      	b.n	8001df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dea:	f7ff f995 	bl	8001118 <HAL_RCC_GetPCLK1Freq>
 8001dee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dfc:	f040 810c 	bne.w	8002018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e12:	4622      	mov	r2, r4
 8001e14:	462b      	mov	r3, r5
 8001e16:	1891      	adds	r1, r2, r2
 8001e18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e1a:	415b      	adcs	r3, r3
 8001e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e22:	4621      	mov	r1, r4
 8001e24:	eb12 0801 	adds.w	r8, r2, r1
 8001e28:	4629      	mov	r1, r5
 8001e2a:	eb43 0901 	adc.w	r9, r3, r1
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e42:	4690      	mov	r8, r2
 8001e44:	4699      	mov	r9, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	eb18 0303 	adds.w	r3, r8, r3
 8001e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e50:	462b      	mov	r3, r5
 8001e52:	eb49 0303 	adc.w	r3, r9, r3
 8001e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e6e:	460b      	mov	r3, r1
 8001e70:	18db      	adds	r3, r3, r3
 8001e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e74:	4613      	mov	r3, r2
 8001e76:	eb42 0303 	adc.w	r3, r2, r3
 8001e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e84:	f7fe f9be 	bl	8000204 <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <UART_SetConfig+0x2d4>)
 8001e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	011c      	lsls	r4, r3, #4
 8001e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ea8:	4642      	mov	r2, r8
 8001eaa:	464b      	mov	r3, r9
 8001eac:	1891      	adds	r1, r2, r2
 8001eae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001eb0:	415b      	adcs	r3, r3
 8001eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001eb8:	4641      	mov	r1, r8
 8001eba:	eb12 0a01 	adds.w	sl, r2, r1
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ed8:	4692      	mov	sl, r2
 8001eda:	469b      	mov	fp, r3
 8001edc:	4643      	mov	r3, r8
 8001ede:	eb1a 0303 	adds.w	r3, sl, r3
 8001ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8001eec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001efc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f04:	460b      	mov	r3, r1
 8001f06:	18db      	adds	r3, r3, r3
 8001f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	eb42 0303 	adc.w	r3, r2, r3
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f1a:	f7fe f973 	bl	8000204 <__aeabi_uldivmod>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <UART_SetConfig+0x2d4>)
 8001f26:	fba3 2301 	umull	r2, r3, r3, r1
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2264      	movs	r2, #100	@ 0x64
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	1acb      	subs	r3, r1, r3
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f3a:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <UART_SetConfig+0x2d4>)
 8001f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f48:	441c      	add	r4, r3
 8001f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	464b      	mov	r3, r9
 8001f60:	1891      	adds	r1, r2, r2
 8001f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f64:	415b      	adcs	r3, r3
 8001f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	1851      	adds	r1, r2, r1
 8001f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f72:	4649      	mov	r1, r9
 8001f74:	414b      	adcs	r3, r1
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f84:	4659      	mov	r1, fp
 8001f86:	00cb      	lsls	r3, r1, #3
 8001f88:	4651      	mov	r1, sl
 8001f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f8e:	4651      	mov	r1, sl
 8001f90:	00ca      	lsls	r2, r1, #3
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	4642      	mov	r2, r8
 8001f9a:	189b      	adds	r3, r3, r2
 8001f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	eb42 0303 	adc.w	r3, r2, r3
 8001fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	18db      	adds	r3, r3, r3
 8001fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	eb42 0303 	adc.w	r3, r2, r3
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fd6:	f7fe f915 	bl	8000204 <__aeabi_uldivmod>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <UART_SetConfig+0x2d4>)
 8001fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	2164      	movs	r1, #100	@ 0x64
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	3332      	adds	r3, #50	@ 0x32
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <UART_SetConfig+0x2d4>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	f003 0207 	and.w	r2, r3, #7
 8001ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4422      	add	r2, r4
 8002006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002008:	e106      	b.n	8002218 <UART_SetConfig+0x4d8>
 800200a:	bf00      	nop
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002022:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800202a:	4642      	mov	r2, r8
 800202c:	464b      	mov	r3, r9
 800202e:	1891      	adds	r1, r2, r2
 8002030:	6239      	str	r1, [r7, #32]
 8002032:	415b      	adcs	r3, r3
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
 8002036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800203a:	4641      	mov	r1, r8
 800203c:	1854      	adds	r4, r2, r1
 800203e:	4649      	mov	r1, r9
 8002040:	eb43 0501 	adc.w	r5, r3, r1
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	00eb      	lsls	r3, r5, #3
 800204e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002052:	00e2      	lsls	r2, r4, #3
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	4643      	mov	r3, r8
 800205a:	18e3      	adds	r3, r4, r3
 800205c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002060:	464b      	mov	r3, r9
 8002062:	eb45 0303 	adc.w	r3, r5, r3
 8002066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800206a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002076:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002086:	4629      	mov	r1, r5
 8002088:	008b      	lsls	r3, r1, #2
 800208a:	4621      	mov	r1, r4
 800208c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002090:	4621      	mov	r1, r4
 8002092:	008a      	lsls	r2, r1, #2
 8002094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002098:	f7fe f8b4 	bl	8000204 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4b60      	ldr	r3, [pc, #384]	@ (8002224 <UART_SetConfig+0x4e4>)
 80020a2:	fba3 2302 	umull	r2, r3, r3, r2
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	011c      	lsls	r4, r3, #4
 80020aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020bc:	4642      	mov	r2, r8
 80020be:	464b      	mov	r3, r9
 80020c0:	1891      	adds	r1, r2, r2
 80020c2:	61b9      	str	r1, [r7, #24]
 80020c4:	415b      	adcs	r3, r3
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020cc:	4641      	mov	r1, r8
 80020ce:	1851      	adds	r1, r2, r1
 80020d0:	6139      	str	r1, [r7, #16]
 80020d2:	4649      	mov	r1, r9
 80020d4:	414b      	adcs	r3, r1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e4:	4659      	mov	r1, fp
 80020e6:	00cb      	lsls	r3, r1, #3
 80020e8:	4651      	mov	r1, sl
 80020ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ee:	4651      	mov	r1, sl
 80020f0:	00ca      	lsls	r2, r1, #3
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	4642      	mov	r2, r8
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002100:	464b      	mov	r3, r9
 8002102:	460a      	mov	r2, r1
 8002104:	eb42 0303 	adc.w	r3, r2, r3
 8002108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002116:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002124:	4649      	mov	r1, r9
 8002126:	008b      	lsls	r3, r1, #2
 8002128:	4641      	mov	r1, r8
 800212a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800212e:	4641      	mov	r1, r8
 8002130:	008a      	lsls	r2, r1, #2
 8002132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002136:	f7fe f865 	bl	8000204 <__aeabi_uldivmod>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4611      	mov	r1, r2
 8002140:	4b38      	ldr	r3, [pc, #224]	@ (8002224 <UART_SetConfig+0x4e4>)
 8002142:	fba3 2301 	umull	r2, r3, r3, r1
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2264      	movs	r2, #100	@ 0x64
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	1acb      	subs	r3, r1, r3
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	3332      	adds	r3, #50	@ 0x32
 8002154:	4a33      	ldr	r2, [pc, #204]	@ (8002224 <UART_SetConfig+0x4e4>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002160:	441c      	add	r4, r3
 8002162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002166:	2200      	movs	r2, #0
 8002168:	673b      	str	r3, [r7, #112]	@ 0x70
 800216a:	677a      	str	r2, [r7, #116]	@ 0x74
 800216c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002170:	4642      	mov	r2, r8
 8002172:	464b      	mov	r3, r9
 8002174:	1891      	adds	r1, r2, r2
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	415b      	adcs	r3, r3
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002180:	4641      	mov	r1, r8
 8002182:	1851      	adds	r1, r2, r1
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	4649      	mov	r1, r9
 8002188:	414b      	adcs	r3, r1
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002198:	4659      	mov	r1, fp
 800219a:	00cb      	lsls	r3, r1, #3
 800219c:	4651      	mov	r1, sl
 800219e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021a2:	4651      	mov	r1, sl
 80021a4:	00ca      	lsls	r2, r1, #3
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	4642      	mov	r2, r8
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021b2:	464b      	mov	r3, r9
 80021b4:	460a      	mov	r2, r1
 80021b6:	eb42 0303 	adc.w	r3, r2, r3
 80021ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80021c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021d4:	4649      	mov	r1, r9
 80021d6:	008b      	lsls	r3, r1, #2
 80021d8:	4641      	mov	r1, r8
 80021da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021de:	4641      	mov	r1, r8
 80021e0:	008a      	lsls	r2, r1, #2
 80021e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021e6:	f7fe f80d 	bl	8000204 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <UART_SetConfig+0x4e4>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	2164      	movs	r1, #100	@ 0x64
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	3332      	adds	r3, #50	@ 0x32
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <UART_SetConfig+0x4e4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	f003 020f 	and.w	r2, r3, #15
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4422      	add	r2, r4
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	bf00      	nop
 800221a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800221e:	46bd      	mov	sp, r7
 8002220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002224:	51eb851f 	.word	0x51eb851f

08002228 <memset>:
 8002228:	4402      	add	r2, r0
 800222a:	4603      	mov	r3, r0
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <memset+0xa>
 8002230:	4770      	bx	lr
 8002232:	f803 1b01 	strb.w	r1, [r3], #1
 8002236:	e7f9      	b.n	800222c <memset+0x4>

08002238 <__libc_init_array>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4d0d      	ldr	r5, [pc, #52]	@ (8002270 <__libc_init_array+0x38>)
 800223c:	4c0d      	ldr	r4, [pc, #52]	@ (8002274 <__libc_init_array+0x3c>)
 800223e:	1b64      	subs	r4, r4, r5
 8002240:	10a4      	asrs	r4, r4, #2
 8002242:	2600      	movs	r6, #0
 8002244:	42a6      	cmp	r6, r4
 8002246:	d109      	bne.n	800225c <__libc_init_array+0x24>
 8002248:	4d0b      	ldr	r5, [pc, #44]	@ (8002278 <__libc_init_array+0x40>)
 800224a:	4c0c      	ldr	r4, [pc, #48]	@ (800227c <__libc_init_array+0x44>)
 800224c:	f000 f818 	bl	8002280 <_init>
 8002250:	1b64      	subs	r4, r4, r5
 8002252:	10a4      	asrs	r4, r4, #2
 8002254:	2600      	movs	r6, #0
 8002256:	42a6      	cmp	r6, r4
 8002258:	d105      	bne.n	8002266 <__libc_init_array+0x2e>
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002260:	4798      	blx	r3
 8002262:	3601      	adds	r6, #1
 8002264:	e7ee      	b.n	8002244 <__libc_init_array+0xc>
 8002266:	f855 3b04 	ldr.w	r3, [r5], #4
 800226a:	4798      	blx	r3
 800226c:	3601      	adds	r6, #1
 800226e:	e7f2      	b.n	8002256 <__libc_init_array+0x1e>
 8002270:	080022b8 	.word	0x080022b8
 8002274:	080022b8 	.word	0x080022b8
 8002278:	080022b8 	.word	0x080022b8
 800227c:	080022bc 	.word	0x080022bc

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr


UART_BARMETAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000568  08000568  00001568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000574  08000574  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000574  08000574  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000574  08000574  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000578  08000578  00001578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800057c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000580  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000580  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001475  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000537  00000000  00000000  000034a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  000039e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000157  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f446  00000000  00000000  00003d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021ea  00000000  00000000  00023165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c14b3  00000000  00000000  0002534f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e0  00000000  00000000  000e6848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e6e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000550 	.word	0x08000550

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000550 	.word	0x08000550

08000204 <uart_init>:

//BAUD RATE
#define  BAUD_RATE		115200

void uart_init()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC ->AHB1ENR |=GPIOA_EN;       //AHB1 BUS ENABLE
 8000208:	4b36      	ldr	r3, [pc, #216]	@ (80002e4 <uart_init+0xe0>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a35      	ldr	r2, [pc, #212]	@ (80002e4 <uart_init+0xe0>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	//GPIOA->MODER = (0X00000020);   //PA2 CHANGE TO MODE OF ALTERNATE FUNCTION
	GPIOA->MODER |= (1U << 5);
 8000214:	4b34      	ldr	r3, [pc, #208]	@ (80002e8 <uart_init+0xe4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a33      	ldr	r2, [pc, #204]	@ (80002e8 <uart_init+0xe4>)
 800021a:	f043 0320 	orr.w	r3, r3, #32
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U << 4);
 8000220:	4b31      	ldr	r3, [pc, #196]	@ (80002e8 <uart_init+0xe4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a30      	ldr	r2, [pc, #192]	@ (80002e8 <uart_init+0xe4>)
 8000226:	f023 0310 	bic.w	r3, r3, #16
 800022a:	6013      	str	r3, [r2, #0]

	// setting PA3 is AF function
	GPIOA->MODER &= ~(1U<<6);
 800022c:	4b2e      	ldr	r3, [pc, #184]	@ (80002e8 <uart_init+0xe4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a2d      	ldr	r2, [pc, #180]	@ (80002e8 <uart_init+0xe4>)
 8000232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000236:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U<<7);
 8000238:	4b2b      	ldr	r3, [pc, #172]	@ (80002e8 <uart_init+0xe4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a2a      	ldr	r2, [pc, #168]	@ (80002e8 <uart_init+0xe4>)
 800023e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000242:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1U << 8);   //SET THE ALTERNATE FUNCTION LOW REGISTER FOR UART TX
 8000244:	4b28      	ldr	r3, [pc, #160]	@ (80002e8 <uart_init+0xe4>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a27      	ldr	r2, [pc, #156]	@ (80002e8 <uart_init+0xe4>)
 800024a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 8000250:	4b25      	ldr	r3, [pc, #148]	@ (80002e8 <uart_init+0xe4>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a24      	ldr	r2, [pc, #144]	@ (80002e8 <uart_init+0xe4>)
 8000256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800025a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 800025c:	4b22      	ldr	r3, [pc, #136]	@ (80002e8 <uart_init+0xe4>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a21      	ldr	r2, [pc, #132]	@ (80002e8 <uart_init+0xe4>)
 8000262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000266:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U << 11);
 8000268:	4b1f      	ldr	r3, [pc, #124]	@ (80002e8 <uart_init+0xe4>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a1e      	ldr	r2, [pc, #120]	@ (80002e8 <uart_init+0xe4>)
 800026e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000272:	6213      	str	r3, [r2, #32]

	//setting PA3 Mapped with UART_RX
	GPIOA->AFR[0] |=(1U<<12);
 8000274:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <uart_init+0xe4>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a1b      	ldr	r2, [pc, #108]	@ (80002e8 <uart_init+0xe4>)
 800027a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000280:	4b19      	ldr	r3, [pc, #100]	@ (80002e8 <uart_init+0xe4>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a18      	ldr	r2, [pc, #96]	@ (80002e8 <uart_init+0xe4>)
 8000286:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800028a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 800028c:	4b16      	ldr	r3, [pc, #88]	@ (80002e8 <uart_init+0xe4>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a15      	ldr	r2, [pc, #84]	@ (80002e8 <uart_init+0xe4>)
 8000292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000296:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000298:	4b13      	ldr	r3, [pc, #76]	@ (80002e8 <uart_init+0xe4>)
 800029a:	6a1b      	ldr	r3, [r3, #32]
 800029c:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <uart_init+0xe4>)
 800029e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002a2:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= USART_EN;		//APB1 BUS ENABLE
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <uart_init+0xe0>)
 80002a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002a8:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <uart_init+0xe0>)
 80002aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002ae:	6413      	str	r3, [r2, #64]	@ 0x40

	USART2->BRR = ((PERI_CLOCK + (BAUD_RATE /2U)) / BAUD_RATE);
 80002b0:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <uart_init+0xe8>)
 80002b2:	228b      	movs	r2, #139	@ 0x8b
 80002b4:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= CR1_TX_EN ;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <uart_init+0xe8>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a0c      	ldr	r2, [pc, #48]	@ (80002ec <uart_init+0xe8>)
 80002bc:	f043 0308 	orr.w	r3, r3, #8
 80002c0:	60d3      	str	r3, [r2, #12]

	//Receiver Enable
	USART2->CR1 |=(1U<<2);
 80002c2:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <uart_init+0xe8>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a09      	ldr	r2, [pc, #36]	@ (80002ec <uart_init+0xe8>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	60d3      	str	r3, [r2, #12]

	USART2->CR1 |= CR1_UART_EN;
 80002ce:	4b07      	ldr	r3, [pc, #28]	@ (80002ec <uart_init+0xe8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	4a06      	ldr	r2, [pc, #24]	@ (80002ec <uart_init+0xe8>)
 80002d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002d8:	60d3      	str	r3, [r2, #12]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000
 80002ec:	40004400 	.word	0x40004400

080002f0 <delayMs>:
void delayMs(int delay)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
    int i;
    for (i=0; delay>0; delay--)
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	e00d      	b.n	800031a <delayMs+0x2a>
        for (i=0; i<3195; i++) ;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	e002      	b.n	800030a <delayMs+0x1a>
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3301      	adds	r3, #1
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f640 427a 	movw	r2, #3194	@ 0xc7a
 8000310:	4293      	cmp	r3, r2
 8000312:	ddf7      	ble.n	8000304 <delayMs+0x14>
    for (i=0; delay>0; delay--)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3b01      	subs	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	dcee      	bgt.n	80002fe <delayMs+0xe>
}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <uart_write>:
void uart_write(uint8_t ch)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	//checking UART Transfered or Not
	while(!(USART2->SR & (1U<<7))){}
 800033a:	bf00      	nop
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <uart_write+0x2c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <uart_write+0xc>
    USART2->DR =(ch & 0xFF);
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <uart_write+0x2c>)
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	6053      	str	r3, [r2, #4]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40004400 	.word	0x40004400

08000360 <string_write>:
void string_write(uint8_t *ch)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	//String Write inside UART
	while(*ch)
 8000368:	e009      	b.n	800037e <string_write+0x1e>
	{
		uart_write(*ch++);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffdc 	bl	8000330 <uart_write>
		delayMs(30);
 8000378:	201e      	movs	r0, #30
 800037a:	f7ff ffb9 	bl	80002f0 <delayMs>
	while(*ch)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f1      	bne.n	800036a <string_write+0xa>
	}
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <uart_read>:
uint8_t uart_read(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	while(!(USART2->SR & (1U << 6))) {}
 8000394:	bf00      	nop
 8000396:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <uart_read+0x24>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f9      	beq.n	8000396 <uart_read+0x6>
	return USART2->DR;
 80003a2:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <uart_read+0x24>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	b2db      	uxtb	r3, r3
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40004400 	.word	0x40004400

080003b8 <main>:

uint8_t s;
int main()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
	uart_init();
 80003be:	f7ff ff21 	bl	8000204 <uart_init>
	uint8_t  my[10]="HELLO";
 80003c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000400 <main+0x48>)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ca:	6018      	str	r0, [r3, #0]
 80003cc:	3304      	adds	r3, #4
 80003ce:	8019      	strh	r1, [r3, #0]
 80003d0:	f107 030a 	add.w	r3, r7, #10
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
	while(1)
		{
		    string_write(my);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ffc0 	bl	8000360 <string_write>
			delayMs(30);
 80003e0:	201e      	movs	r0, #30
 80003e2:	f7ff ff85 	bl	80002f0 <delayMs>
			s=uart_read();
 80003e6:	f7ff ffd3 	bl	8000390 <uart_read>
 80003ea:	4603      	mov	r3, r0
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <main+0x4c>)
 80003f0:	701a      	strb	r2, [r3, #0]
			uart_write(s);
 80003f2:	4b04      	ldr	r3, [pc, #16]	@ (8000404 <main+0x4c>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff9a 	bl	8000330 <uart_write>
		    string_write(my);
 80003fc:	bf00      	nop
 80003fe:	e7eb      	b.n	80003d8 <main+0x20>
 8000400:	08000568 	.word	0x08000568
 8000404:	20000020 	.word	0x20000020

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f83f 	bl	80004e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <SystemInit+0x20>)
 800046e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000472:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <SystemInit+0x20>)
 8000474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800048c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000490:	f7ff ffea 	bl	8000468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000494:	480c      	ldr	r0, [pc, #48]	@ (80004c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000496:	490d      	ldr	r1, [pc, #52]	@ (80004cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000498:	4a0d      	ldr	r2, [pc, #52]	@ (80004d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004ac:	4c0a      	ldr	r4, [pc, #40]	@ (80004d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80004ba:	f000 f825 	bl	8000508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004be:	f7ff ff7b 	bl	80003b8 <main>
  bx  lr    
 80004c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004d0:	0800057c 	.word	0x0800057c
  ldr r2, =_sbss
 80004d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004d8:	20000028 	.word	0x20000028

080004dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC_IRQHandler>
	...

080004e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_IncTick+0x20>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_IncTick+0x24>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <HAL_IncTick+0x24>)
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	20000024 	.word	0x20000024

08000508 <__libc_init_array>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	4d0d      	ldr	r5, [pc, #52]	@ (8000540 <__libc_init_array+0x38>)
 800050c:	4c0d      	ldr	r4, [pc, #52]	@ (8000544 <__libc_init_array+0x3c>)
 800050e:	1b64      	subs	r4, r4, r5
 8000510:	10a4      	asrs	r4, r4, #2
 8000512:	2600      	movs	r6, #0
 8000514:	42a6      	cmp	r6, r4
 8000516:	d109      	bne.n	800052c <__libc_init_array+0x24>
 8000518:	4d0b      	ldr	r5, [pc, #44]	@ (8000548 <__libc_init_array+0x40>)
 800051a:	4c0c      	ldr	r4, [pc, #48]	@ (800054c <__libc_init_array+0x44>)
 800051c:	f000 f818 	bl	8000550 <_init>
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	10a4      	asrs	r4, r4, #2
 8000524:	2600      	movs	r6, #0
 8000526:	42a6      	cmp	r6, r4
 8000528:	d105      	bne.n	8000536 <__libc_init_array+0x2e>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000530:	4798      	blx	r3
 8000532:	3601      	adds	r6, #1
 8000534:	e7ee      	b.n	8000514 <__libc_init_array+0xc>
 8000536:	f855 3b04 	ldr.w	r3, [r5], #4
 800053a:	4798      	blx	r3
 800053c:	3601      	adds	r6, #1
 800053e:	e7f2      	b.n	8000526 <__libc_init_array+0x1e>
 8000540:	08000574 	.word	0x08000574
 8000544:	08000574 	.word	0x08000574
 8000548:	08000574 	.word	0x08000574
 800054c:	08000578 	.word	0x08000578

08000550 <_init>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr

0800055c <_fini>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr
